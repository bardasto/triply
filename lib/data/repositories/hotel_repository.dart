import '../services/amadeus_service.dart';
import '../models/hotel_model.dart';

class HotelRepository {
  // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ getHotelsWithInfiniteScroll
  static Future<List<Hotel>> getPopularHotels() async {
    try {
      return await AmadeusService.getHotelsWithInfiniteScroll(
        page: 0,
        pageSize: 10,
        refresh: false,
      );
    } catch (e) {
      throw Exception('Failed to load popular hotels: $e');
    }
  }

  // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ getHotelsByCity
  static Future<List<Hotel>> searchHotelsByCity(String cityCode) async {
    try {
      return await AmadeusService.getHotelsByCity(cityCode);
    } catch (e) {
      throw Exception('Failed to search hotels: $e');
    }
  }

  // ‚úÖ –ú–µ—Ç–æ–¥ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º getHotelsByCity –∫–∞–∫ fallback
  static Future<List<Hotel>> searchHotelsByLocation({
    required double latitude,
    required double longitude,
    int radius = 5,
  }) async {
    try {
      print('üåç Searching hotels near coordinates: $latitude, $longitude');

      // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
      const fallbackCities = ['PAR', 'LON', 'NYC', 'TYO'];
      final results = <Hotel>[];

      for (final cityCode in fallbackCities.take(2)) {
        try {
          final cityHotels = await AmadeusService.getHotelsByCity(cityCode);
          results.addAll(
              cityHotels.take(5)); // –ë–µ—Ä–µ–º –ø–æ 5 –æ—Ç–µ–ª–µ–π –∏–∑ –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
        } catch (e) {
          print('‚ùå Failed to load hotels from $cityCode: $e');
        }
      }

      return results.take(10).toList(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
    } catch (e) {
      throw Exception('Failed to search hotels by location: $e');
    }
  }

  // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è infinite scroll
  static Future<List<Hotel>> getHotelsPage({
    int page = 0,
    int pageSize = 20,
    bool refresh = false,
  }) async {
    try {
      return await AmadeusService.getHotelsWithInfiniteScroll(
        page: page,
        pageSize: pageSize,
        refresh: refresh,
      );
    } catch (e) {
      throw Exception('Failed to load hotels page: $e');
    }
  }

  // ‚úÖ –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  static Future<bool> testConnection() async {
    return await AmadeusService.testConnection();
  }

  // ‚úÖ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
  static void clearCache() {
    AmadeusService.clearHotelsCache();
  }

  // ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –¥–µ–±–∞–≥–∞
  static int get totalLoadedHotels => AmadeusService.totalLoadedHotels;
  static int get loadedCities => AmadeusService.loadedCities;
  static bool get hasMoreCities => AmadeusService.hasMoreCities;
}
