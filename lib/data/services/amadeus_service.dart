import 'dart:convert';
import 'dart:math';
import 'package:http/http.dart' as http;
import '../../core/config/amadeus_config.dart';
import '../models/hotel_model.dart';
import 'photo_service.dart';

class AmadeusService {
  static String? _accessToken;
  static DateTime? _tokenExpiry;

  // ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞
  static const List<Map<String, String>> _cities = [
    {'name': 'Paris', 'code': 'PAR', 'country': 'France'},
    {'name': 'London', 'code': 'LON', 'country': 'United Kingdom'},
    {'name': 'New York', 'code': 'NYC', 'country': 'United States'},
    {'name': 'Tokyo', 'code': 'TYO', 'country': 'Japan'},
    {'name': 'Barcelona', 'code': 'BCN', 'country': 'Spain'},
    {'name': 'Rome', 'code': 'ROM', 'country': 'Italy'},
    {'name': 'Amsterdam', 'code': 'AMS', 'country': 'Netherlands'},
    {'name': 'Dubai', 'code': 'DXB', 'country': 'UAE'},
    {'name': 'Singapore', 'code': 'SIN', 'country': 'Singapore'},
    {'name': 'Sydney', 'code': 'SYD', 'country': 'Australia'},
    {'name': 'Bangkok', 'code': 'BKK', 'country': 'Thailand'},
    {'name': 'Istanbul', 'code': 'IST', 'country': 'Turkey'},
    {'name': 'Los Angeles', 'code': 'LAX', 'country': 'United States'},
    {'name': 'Berlin', 'code': 'BER', 'country': 'Germany'},
    {'name': 'Madrid', 'code': 'MAD', 'country': 'Spain'},
  ];

  static int _currentCityBatch = 0;
  static List<Hotel> _allHotels = [];
  static bool _allCitiesLoaded = false;

  // üîê –ü–æ–ª—É—á–µ–Ω–∏–µ access token
  static Future<String?> _getAccessToken() async {
    if (_accessToken != null &&
        _tokenExpiry != null &&
        DateTime.now().isBefore(_tokenExpiry!
            .subtract(Duration(seconds: AmadeusConfig.tokenExpiryBuffer)))) {
      return _accessToken;
    }

    try {
      final response = await http.post(
        Uri.parse('${AmadeusConfig.baseUrl}${AmadeusConfig.tokenUrl}'),
        headers: {'Content-Type': 'application/x-www-form-urlencoded'},
        body: {
          'grant_type': 'client_credentials',
          'client_id': AmadeusConfig.apiKey,
          'client_secret': AmadeusConfig.apiSecret,
        },
      );

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        _accessToken = data['access_token'];

        final expiresIn = data['expires_in'] ?? 1799;
        _tokenExpiry = DateTime.now().add(Duration(seconds: expiresIn));

        return _accessToken;
      } else {
        print('‚ùå Token error: ${response.statusCode} - ${response.body}');
        return null;
      }
    } catch (e) {
      print('‚ùå Token exception: $e');
      return null;
    }
  }

  // üè® –°–í–ï–†–•–ë–´–°–¢–†–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–µ–ª–µ–π –ë–ï–ó –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
  static Future<List<Hotel>> getHotelsByCity(String cityCode) async {
    final token = await _getAccessToken();
    if (token == null) {
      throw Exception('Failed to get access token');
    }

    try {
      final uri =
          Uri.parse('${AmadeusConfig.baseUrl}${AmadeusConfig.hotelsByCity}')
              .replace(queryParameters: {'cityCode': cityCode});

      final response = await http.get(
        uri,
        headers: {'Authorization': 'Bearer $token'},
      );

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        final List<dynamic> hotelsData = data['data'] ?? [];

        // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–¥—É
        final cityInfo = _cities.firstWhere((city) => city['code'] == cityCode,
            orElse: () =>
                {'name': 'Unknown', 'code': cityCode, 'country': 'Unknown'});
        final cityName = cityInfo['name']!;

        print('‚úÖ Found ${hotelsData.length} hotels in $cityName ($cityCode)');

        // üöÄ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –°–ö–û–†–û–°–¢–¨: —Å–æ–∑–¥–∞–µ–º –æ—Ç–µ–ª–∏ –ë–ï–ó –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
        final hotels = <Hotel>[];
        for (int i = 0; i < hotelsData.length; i++) {
          final hotel = Hotel.fromJson(hotelsData[i]);

          // –°–æ–∑–¥–∞–µ–º –æ—Ç–µ–ª—å —Å placeholder'–æ–º
          final hotelWithPlaceholder = hotel.copyWith(
            photos: [],
            mainPhoto: null,
            rating: PhotoService.getHotelRating(hotel.hotelId),
          );

          hotels.add(hotelWithPlaceholder);

          // üöÄ –ê–°–ò–ù–•–†–û–ù–ù–û –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –í –§–û–ù–ï (–Ω–µ –±–ª–æ–∫–∏—Ä—É—è UI)
          if (i < 100) {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 100 –æ—Ç–µ–ª–µ–π
            _loadPhotoInBackground(hotelWithPlaceholder, cityName, hotels, i);
          }
        }

        return hotels;
      } else {
        print('‚ùå Hotels error: ${response.statusCode} - ${response.body}');
        throw Exception('Failed to fetch hotels: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Hotels exception: $e');
      throw Exception('Failed to fetch hotels: $e');
    }
  }

  // üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –≤ —Ñ–æ–Ω–µ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
  static void _loadPhotoInBackground(
      Hotel hotel, String cityName, List<Hotel> hotelsList, int index) {
    PhotoService.getRealHotelPhoto(hotel.name, cityName, hotel.hotelId)
        .then((photoUrl) {
      if (photoUrl != null && index < hotelsList.length) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —Å –Ω–æ–≤—ã–º —Ñ–æ—Ç–æ
        final updatedHotel = hotel.copyWith(
          mainPhoto: photoUrl,
          photos: [photoUrl],
        );

        // –ó–∞–º–µ–Ω—è–µ–º –æ—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ (–µ—Å–ª–∏ –æ–Ω –µ—â–µ —Ç–∞–º)
        if (index < hotelsList.length &&
            hotelsList[index].hotelId == hotel.hotelId) {
          hotelsList[index] = updatedHotel;
          print('‚úÖ Updated photo for ${hotel.name}');
        }
      }
    }).catchError((error) {
      print('‚ö†Ô∏è Background photo loading failed for ${hotel.name}: $error');
    });
  }

  // ‚úÖ –ë–ï–°–ö–û–ù–ï–ß–ù–´–ô –°–ö–†–û–õ–õ - –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–µ–ª–µ–π –ø–æ—Ä—Ü–∏—è–º–∏
  static Future<List<Hotel>> getHotelsWithInfiniteScroll({
    int page = 0,
    int pageSize = 20,
    bool refresh = false,
  }) async {
    try {
      if (refresh) {
        print('üîÑ Refreshing hotels - resetting cache...');
        _allHotels.clear();
        _currentCityBatch = 0;
        _allCitiesLoaded = false;
      }

      final startIndex = page * pageSize;
      final endIndex = startIndex + pageSize;

      // üöÄ –í–ê–ñ–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –±–æ–ª—å—à–µ –æ—Ç–µ–ª–µ–π –î–û –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–µ—à–∞
      if (_allHotels.length < endIndex && !_allCitiesLoaded) {
        print('üìà Need more hotels: have ${_allHotels.length}, need $endIndex');
        await _loadMoreHotels();
      }

      // –ï—Å–ª–∏ —É –Ω–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ç–µ–ª–µ–π –≤ –∫–µ—à–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
      if (_allHotels.length >= endIndex) {
        final result = _allHotels.sublist(startIndex, endIndex);
        print(
            'üìÑ Returning hotels $startIndex-$endIndex of ${_allHotels.length}');
        return result;
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á—Ç–æ –µ—Å—Ç—å, –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞
      if (_allHotels.length > startIndex) {
        final result = _allHotels.sublist(startIndex);
        print(
            'üìÑ Returning remaining hotels $startIndex-${_allHotels.length} (final batch)');
        return result;
      }

      // –ï—Å–ª–∏ –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –±–æ–ª—å—à–µ –æ—Ç–µ–ª–µ–π –Ω–µ—Ç
      if (_allCitiesLoaded) {
        print('üèÅ All hotels loaded, no more data available');
        return [];
      }

      return [];
    } catch (e) {
      print('‚ùå Infinite scroll error: $e');
      return [];
    }
  }

  // ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–µ–ª–µ–π –∏–∑ –Ω–æ–≤—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
  static Future<void> _loadMoreHotels() async {
    const batchSize =
        3; // –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–æ 3 –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–µ–ª–µ–π
    final startCityIndex = _currentCityBatch * batchSize;
    final endCityIndex = (startCityIndex + batchSize).clamp(0, _cities.length);

    if (startCityIndex >= _cities.length) {
      _allCitiesLoaded = true;
      print('üèÅ All cities processed');
      return;
    }

    print(
        'üåç Loading hotels from cities ${startCityIndex + 1}-$endCityIndex of ${_cities.length}');

    for (int i = startCityIndex; i < endCityIndex; i++) {
      final city = _cities[i];
      final cityCode = city['code']!;
      final cityName = city['name']!;

      try {
        print('üåç Loading hotels from $cityName ($cityCode)...');
        final cityHotels = await getHotelsByCity(cityCode);
        _allHotels.addAll(cityHotels);

        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        if (i < endCityIndex - 1) {
          await Future.delayed(const Duration(milliseconds: 100));
        }
      } catch (e) {
        print('‚ùå Failed to load hotels from $cityName: $e');
      }
    }

    _currentCityBatch++;

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
    _allHotels.shuffle();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –≤—Å–µ –≥–æ—Ä–æ–¥–∞
    if (endCityIndex >= _cities.length) {
      _allCitiesLoaded = true;
    }

    print('‚úÖ Total hotels loaded: ${_allHotels.length}');
  }

  // üß™ –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  static Future<bool> testConnection() async {
    try {
      final token = await _getAccessToken();
      return token != null;
    } catch (e) {
      return false;
    }
  }

  // üîÑ –°–±—Ä–æ—Å –∫–µ—à–∞ –æ—Ç–µ–ª–µ–π
  static void clearHotelsCache() {
    _allHotels.clear();
    _currentCityBatch = 0;
    _allCitiesLoaded = false;
    print('üßπ Hotels cache cleared');
  }

  // üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –æ—Ç–µ–ª–µ–π
  static int get totalLoadedHotels => _allHotels.length;
  static int get loadedCities => _currentCityBatch * 3;
  static bool get hasMoreCities => !_allCitiesLoaded;
}
