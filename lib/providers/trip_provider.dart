import 'package:flutter/material.dart';
import 'package:geolocator/geolocator.dart';
import '../core/models/country_model.dart';
import '../core/models/trip_model.dart';
import '../core/data/repositories/trip_repository.dart';
import '../data/services/location_service.dart';

class TripProvider with ChangeNotifier {
  final TripRepository _repository = TripRepository();

  List<CountryModel> _countries = [];
  List<TripModel> _trips = [];
  List<TripModel> _featuredTrips = [];
  List<TripModel> _nearbyTrips = [];
  bool _isLoading = false;
  bool _isLoadingLocation = false;
  String? _error;

  Position? _userPosition;
  String? _currentCountry;

  List<CountryModel> get countries => _countries;
  List<TripModel> get trips => _trips;
  List<TripModel> get featuredTrips => _featuredTrips;
  List<TripModel> get nearbyTrips => _nearbyTrips;
  bool get isLoading => _isLoading;
  bool get isLoadingLocation => _isLoadingLocation;
  String? get error => _error;
  String? get currentCountry => _currentCountry;
  Position? get userPosition => _userPosition;

  // ‚úÖ –ó–∞–≥—Ä—É–∑–∏—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
  Future<void> loadNearbyTrips({double radiusKm = 3000}) async {
    _isLoadingLocation = true;
    _error = null;
    notifyListeners();

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
      final position = await LocationService.getCurrentPosition();

      if (position == null) {
        print('‚ö†Ô∏è Could not get position, loading featured trips instead');
        await loadFeaturedTrips();
        _isLoadingLocation = false;
        notifyListeners();
        return;
      }

      _userPosition = position;
      print('üìç User position: ${position.latitude}, ${position.longitude}');

      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
      _currentCountry = await LocationService.getCountryFromPosition(position);
      print('üåç Current country: $_currentCountry');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–æ–µ–∑–¥–∫–∏
      final allTrips = await _repository.getFeaturedTrips();
      print('üì¶ Total trips loaded: ${allTrips.length}');

      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–∞–¥–∏—É—Å—É –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
      final tripsWithDistance = <Map<String, dynamic>>[];

      for (var trip in allTrips) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É –ø–æ–µ–∑–¥–∫–∏
        if (trip.latitude != null && trip.longitude != null) {
          final distance = LocationService.calculateDistance(
            position.latitude,
            position.longitude,
            trip.latitude!,
            trip.longitude!,
          );

          // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —Ä–∞–¥–∏—É—Å–µ
          if (distance <= radiusKm) {
            tripsWithDistance.add({
              'trip': trip,
              'distance': distance,
            });
          }
        }
      }

      print('üéØ Trips within ${radiusKm}km: ${tripsWithDistance.length}');

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é (–±–ª–∏–∂–∞–π—à–∏–µ –ø–µ—Ä–≤—ã–µ)
      tripsWithDistance.sort((a, b) =>
          (a['distance'] as double).compareTo(b['distance'] as double));

      _nearbyTrips =
          tripsWithDistance.map((item) => item['trip'] as TripModel).toList();

      print('‚úÖ Loaded ${_nearbyTrips.length} nearby trips');

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏—á–µ–≥–æ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏, –∑–∞–≥—Ä—É–∂–∞–µ–º featured trips
      if (_nearbyTrips.isEmpty) {
        print('‚ö†Ô∏è No nearby trips found, using featured trips');
        await loadFeaturedTrips();
      }
    } catch (e) {
      _error = e.toString();
      print('‚ùå Error loading nearby trips: $e');
      // Fallback –Ω–∞ featured trips
      await loadFeaturedTrips();
    } finally {
      _isLoadingLocation = false;
      notifyListeners();
    }
  }

  // ‚úÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ø–æ–µ–∑–¥–∫–∏ (–¥–ª—è UI)
  double? getDistanceToTrip(TripModel trip) {
    if (_userPosition == null ||
        trip.latitude == null ||
        trip.longitude == null) {
      return null;
    }

    return LocationService.calculateDistance(
      _userPosition!.latitude,
      _userPosition!.longitude,
      trip.latitude!,
      trip.longitude!,
    );
  }

  // ‚úÖ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω—ã –ø–æ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç—É
  Future<void> loadCountriesByContinent(String continent) async {
    _isLoading = true;
    _error = null;
    notifyListeners();

    try {
      _countries = await _repository.getCountriesByContinent(continent);
    } catch (e) {
      _error = e.toString();
      print('‚ùå Error loading countries: $e');
    }

    _isLoading = false;
    notifyListeners();
  }

  // ‚úÖ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã
  Future<void> loadAllCountries() async {
    _isLoading = true;
    _error = null;
    notifyListeners();

    try {
      _countries = await _repository.getAllCountries();
    } catch (e) {
      _error = e.toString();
      print('‚ùå Error loading all countries: $e');
    }

    _isLoading = false;
    notifyListeners();
  }

  // ‚úÖ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –ø–æ–µ–∑–¥–∫–∏
  Future<void> loadAllTrips() async {
    _isLoading = true;
    _error = null;
    notifyListeners();

    try {
      _trips = await _repository.getAllTrips();
    } catch (e) {
      _error = e.toString();
      print('‚ùå Error loading trips: $e');
    }

    _isLoading = false;
    notifyListeners();
  }

  // ‚úÖ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–æ–µ–∑–¥–∫–∏
  Future<void> loadFeaturedTrips() async {
    _isLoading = true;
    _error = null;
    notifyListeners();

    try {
      _featuredTrips = await _repository.getFeaturedTrips();
    } catch (e) {
      _error = e.toString();
      print('‚ùå Error loading featured trips: $e');
    }

    _isLoading = false;
    notifyListeners();
  }

  // ‚úÖ –ü–æ–∏—Å–∫ –ø–æ–µ–∑–¥–æ–∫
  Future<List<TripModel>> searchTrips(String query) async {
    try {
      return await _repository.searchTrips(query);
    } catch (e) {
      print('‚ùå Error searching trips: $e');
      return [];
    }
  }

  // ‚úÖ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–µ–∑–¥–∫–∏ –ø–æ —Å—Ç—Ä–∞–Ω–µ
  Future<List<TripModel>> getTripsByCountry(String countryId) async {
    try {
      return await _repository.getTripsByCountry(countryId);
    } catch (e) {
      print('‚ùå Error getting trips by country: $e');
      return [];
    }
  }

  // ‚úÖ –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é
  Future<void> refreshLocation() async {
    await loadNearbyTrips();
  }
}
